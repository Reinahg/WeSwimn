plugins {
	id 'java'
    id 'java-library'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
	id 'eclipse'
}

group = 'com.backmaqua'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'mysql:mysql-connector-java'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	//incrementar como un servicio
	implementation 'org.springframework.boot:spring-boot-starter-web'
	
	//librerias base de datos
	//Interactuar con JSON
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'

    //Interactuar con BD
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.apache.commons:commons-lang3:3.6'    
    implementation 'com.mysql:mysql-connector-j:8.2.0'

    implementation 'com.h2database:h2'

    // Dependencia para AWS Lambda API
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.1'
    // Dependencia para empaquetar el c√≥digo como un JAR ejecutable
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'
    implementation 'org.springframework.cloud:spring-cloud-function-adapter-aws:3.2.2'
    implementation 'org.springframework.boot:spring-boot-starter'



    //Mantenibilidad de Codigo / ***
    compileOnly 'org.projectlombok:lombok'  //investigar para que sirve
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'

    // https://mvnrepository.com/artifact/javax.servlet/servlet-api
    compileOnly 'javax.servlet:servlet-api:2.5'

}

jar {
    enabled = true
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}
test {
    jacoco {
        destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
        classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
    }
}

